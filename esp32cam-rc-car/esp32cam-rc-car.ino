#include <ArduinoWebsockets.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include "esp_camera.h"
#include <ESP32Servo.h>
 
 
const uint8_t index_html_gz[] = { 0x1f,0x8b,0x08,0x08,0xf5,0x26,0x66,0x65,0x00,0xff,0x69,0x6e,0x64,0x65,0x78,0x2e,0x68,0x74,0x6d,0x6c,0x2e,0x67,0x7a,0x00,0xcd,0x57,0x4d,0x8f,0xdb,0x36,0x10,0xbd,0x17,0xe8,0x7f,0x60,0x98,0x43,0xbc,0x40,0x2c,0xad,0x77,0xdd,0x62,0xe3,0x5a,0x3e,0x24,0xd9,0x02,0x05,0x02,0xa4,0xe8,0x26,0x08,0x7a,0x0a,0x68,0x69,0x2c,0x31,0x4b,0x91,0x0e,0x49,0xc9,0x71,0x8b,0xfd,0xb5,0xfd,0x23,0x19,0x8a,0x96,0x4c,0x7f,0x09,0xad,0x4e,0xbd,0xc8,0xfc,0x78,0xf3,0xe6,0xcd,0x87,0xc7,0xf2,0xfc,0xd9,0xdb,0xf7,0x6f,0x3e,0xfc,0xf9,0xfb,0x3d,0x29,0x6c,0x29,0x16,0x3f,0xfe,0x30,0x77,0x9f,0x44,0x30,0x99,0x27,0x14,0x24,0xc5,0x13,0x42,0xe6,0x05,0xb0,0xac,0x59,0xe1,0xba,0x04,0xcb,0x48,0x5a,0x30,0x6d,0xc0,0x26,0xf4,0xe3,0x87,0x5f,0xc7,0x77,0x94,0xc4,0x07,0xb7,0x92,0x95,0x90,0xd0,0x9a,0xc3,0x66,0xad,0xb4,0xa5,0x24,0x55,0xd2,0x82,0x44,0xf4,0x86,0x67,0xb6,0x48,0x32,0xa8,0x79,0x0a,0xe3,0x66,0xf3,0x92,0x70,0xc9,0x2d,0x67,0x62,0x6c,0x52,0x26,0x20,0x99,0x44,0xd7,0x01,0x9b,0xe5,0x56,0xc0,0xe2,0xad,0x4a,0xab,0x12,0xed,0xe7,0xb1,0xdf,0x37,0x92,0xe2,0x4e,0xd3,0x7c,0xa9,0xb2,0x6d,0x6b,0xb1,0xe2,0x79,0xa5,0x81,0x18,0xbb,0x45,0x32,0x5a,0x00,0xcf,0x0b,0x3b,0x9b,0xbe,0xaa,0x0b,0x1f,0x49,0x83,0xc9,0x78,0x4d,0x78,0x96,0x50,0x63,0x35,0xb0,0x72,0xec,0xd4,0x31,0x2e,0x41,0xa3,0x50,0xc1,0x8c,0x49,0x28,0x2f,0x59,0x0e,0xc1,0xf9,0x82,0xcc,0x79,0x99,0x07,0x36,0x94,0x18,0x9d,0x26,0xd4,0x5d,0xc4,0xc8,0xd6,0x3a,0x8f,0xbd,0xf7,0x76,0xdb,0xfa,0x71,0x44,0x5a,0x09,0x30,0x81,0x86,0x65,0x65,0xad,0x92,0xcd,0xf5,0x4a,0x63,0x6c,0x40,0x17,0xfe,0xf3,0xd9,0x3c,0xf6,0x77,0xa7,0x7a,0x57,0x76,0x4f,0x70,0x48,0x91,0x83,0xf9,0x4a,0x17,0xf8,0x38,0xb5,0x3e,0x02,0x66,0x1c,0xc3,0xc1,0xc7,0x19,0x37,0x41,0x24,0x87,0x46,0x56,0x33,0x94,0xee,0x9e,0xc7,0x56,0x07,0xd1,0x37,0x39,0xef,0x08,0x5c,0x51,0xc8,0xdf,0x7b,0x15,0x19,0x37,0x6b,0xc1,0xb6,0x33,0xb2,0x12,0xf0,0xed,0x97,0xfd,0xb9,0xdb,0x8e,0x51,0x10,0xa4,0x96,0x2b,0x39,0xc3,0x5e,0x11,0x55,0x29,0x03,0xc0,0x97,0xca,0x58,0xbe,0xda,0x36,0xe5,0xc0,0x04,0x21,0xc2,0xa5,0x49,0x07,0x08,0x26,0x78,0x2e,0xc7,0xdc,0x42,0x69,0x4e,0x6e,0x9f,0xda,0xc5,0xf3,0xae,0x0a,0xff,0x2b,0x55,0xbe,0x9f,0x42,0x49,0xcd,0xd7,0x62,0x46,0xa6,0xd7,0xd7,0xeb,0x50,0xd1,0xae,0x95,0xc9,0xcd,0xd1,0xf9,0x92,0xa5,0x8f,0xb9,0x56,0x95,0xcc,0x50,0x8b,0x50,0x7a,0x46,0x96,0x02,0x8f,0x42,0x57,0x5d,0x49,0x7c,0x49,0x03,0x5f,0x25,0xd3,0x39,0xc7,0xf0,0x7e,0x3a,0xa0,0xdc,0x29,0xb8,0x3b,0x2f,0xe0,0xf6,0xf0,0xb8,0x32,0xa0,0xc7,0x06,0x04,0x66,0x6a,0x46,0xa4,0x92,0x10,0xdc,0x8d,0x4b,0xf5,0xd7,0xb8,0x17,0xb0,0x81,0xe5,0x23,0xb7,0xfd,0x98,0xd2,0xf4,0xdc,0xef,0x32,0x39,0x8f,0x7d,0xf7,0x11,0xd2,0x36,0x63,0xaa,0xf9,0xda,0x76,0xdd,0x88,0x65,0x32,0x96,0xb8,0x89,0x44,0x12,0x92,0xed,0xe6,0x49,0x94,0x83,0xbd,0x17,0xe0,0x96,0xaf,0xb7,0xbf,0x65,0xa3,0x17,0xbe,0x18,0x2f,0xae,0x3a,0x76,0x6f,0xf6,0xe9,0xe1,0xf3,0xc7,0x3f,0xde,0xa1,0x21,0xdd,0x98,0x59,0x1c,0x4f,0x5e,0xdd,0x44,0x93,0x9f,0xef,0xa2,0x69,0x34,0x99,0xdd,0x4d,0xe8,0x11,0x78,0x63,0x10,0x28,0xd1,0xcf,0x27,0x58,0x3e,0xa8,0xf4,0x11,0xec,0xc8,0xdb,0x3b,0xd6,0x16,0xba,0x31,0x91,0x92,0x25,0x18,0x83,0x73,0x06,0xe1,0xa3,0xdd,0xf2,0x8a,0x24,0x8b,0xb0,0x3c,0x7c,0xd5,0x5d,0x45,0x19,0xc3,0xc1,0xca,0xd1,0x03,0x93,0x29,0xa8,0x15,0x79,0x2d,0xd4,0xf2,0x2a,0x04,0x13,0x52,0x33,0x4d,0x2a,0x2d,0xde,0x2f,0xbf,0x60,0x9e,0x90,0x16,0x9d,0x46,0x29,0x46,0x64,0xc1,0x1f,0xe1,0xfe,0x80,0x6e,0x1f,0x67,0x63,0x8d,0xc9,0x89,0x70,0xac,0xa1,0x61,0x47,0x12,0x00,0xba,0x96,0x7d,0x0a,0xe2,0xf0,0x21,0xfb,0xc1,0x15,0x26,0xf6,0x6b,0x05,0x7a,0xfb,0xd0,0xd4,0x4b,0xe9,0x11,0x7d,0xbe,0x1b,0x71,0xc7,0x89,0x75,0x23,0xa5,0xcf,0xac,0x19,0x3c,0xc7,0x46,0x6e,0x84,0xf5,0x19,0x35,0x23,0xee,0xc4,0x08,0x67,0x63,0xaf,0x91,0x1b,0xa0,0x61,0x85,0xbc,0x59,0x51,0x0e,0x88,0xaa,0x28,0xe5,0x7f,0x0e,0xaa,0xee,0x75,0x74,0x36,0xa4,0xba,0xdf,0xcd,0x49,0x44,0xd8,0x73,0x2c,0xcb,0xee,0x6b,0x04,0xbf,0xe3,0x06,0x87,0x16,0x20,0x4c,0xad,0xf1,0x37,0xfe,0x25,0x19,0x81,0x3b,0x3e,0x6e,0x3f,0xe7,0x07,0x07,0x66,0x24,0x54,0x3e,0xa2,0x6f,0xf0,0x5b,0xf7,0xed,0x1f,0xb5,0x6f,0x6b,0xc2,0x96,0xa0,0x2d,0x0b,0x74,0x3d,0x85,0xee,0x7c,0x72,0xce,0xb8,0xb4,0xaa,0x4a,0x0b,0x6c,0x63,0x7c,0x31,0x40,0xc7,0xc7,0x3e,0x51,0xa5,0x01,0x99,0x8d,0xe8,0xe4,0x12,0xb1,0xcb,0xdf,0x70,0xda,0x9b,0x4b,0xb4,0x2e,0xc7,0xc3,0x69,0x6f,0x2f,0xd2,0x62,0x19,0x86,0xd3,0x4e,0x2f,0xd1,0xc6,0x71,0xc3,0x80,0x20,0xf3,0x6f,0x53,0x8e,0xd8,0x5e,0x5f,0xd7,0x43,0x32,0x33,0x9c,0xb4,0x27,0x2f,0x83,0x49,0xfb,0x5a,0x63,0x30,0x69,0x51,0x0e,0xa5,0xbc,0x39,0xe1,0x6c,0x19,0xe5,0x50,0xca,0xc9,0x05,0xca,0x7a,0xb0,0xc8,0xdb,0x8b,0x8c,0x83,0x45,0x4e,0xcf,0xe4,0xb2,0xcd,0x27,0xfe,0x50,0xef,0x7f,0x99,0xf1,0x6d,0xd2,0xbf,0xba,0xe3,0xdb,0xbc,0xff,0xf7,0xf1,0x1d,0x74,0x85,0xea,0x15,0x8f,0x0c,0x00,0x00 };
  
String mensagem;



// horizontal servo
Servo horizontal;
int servoh = 90;

Servo vertical;
int servov = 90;


// Motor A
const int motor1Pin1 = 2;
const int motor1Pin2 = 14;
const int enable1Pin = 12;

// Motor B
const int motor2Pin1 = 15;
const int motor2Pin2 = 13;
const int enable2Pin = 0;

const int freq = 30000;
const int pwmChannel = 0;
//const uint8_t resolution = 8;
int velocidade = 255;

// motores


#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22
 
camera_fb_t * fb = NULL;
 
using namespace websockets;
WebsocketsServer server;

int btnGPIO = 0;
int btnState = false;

const char *ssid = "Carrinho";
const char *password = "Carrinho";

AsyncWebServer webserver(80);
 
void setup()
{

  ESP32PWM::allocateTimer(0);
  ESP32PWM::allocateTimer(1);
  ESP32PWM::allocateTimer(2);
  ESP32PWM::allocateTimer(3);
  horizontal.setPeriodHertz(50);    // standard 50 hz servo
  horizontal.attach(19, 1000, 2000);  
  vertical.setPeriodHertz(50);    // standard 50 hz servo
  vertical.attach(21, 1000, 2000); 
  horizontal.write(90);
  vertical.write(90);

  Serial.begin(115200);
  pinMode(btnGPIO, INPUT);

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  
  Serial.begin(115200);
  Serial.print("EndereÃ§o IP do AP: ");
  Serial.println(IP);

  
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(enable1Pin, OUTPUT);

  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(enable2Pin, OUTPUT);
  
  // configure LED PWM functionalitites
  ledcSetup(pwmChannel, freq, 8);

  // attach the channel to the GPIO to be controlled
  ledcAttachPin(enable1Pin, pwmChannel);  
  ledcAttachPin(enable2Pin, pwmChannel);

  ledcWrite(pwmChannel, velocidade);

 
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  
  if (psramFound()) {
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }
   
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
 
  sensor_t * s = esp_camera_sensor_get();
  s->set_framesize(s, FRAMESIZE_SVGA);
 


 
  webserver.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", index_html_gz, sizeof(index_html_gz));
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });
 
  webserver.begin();
  server.listen(81);
  

  
  Serial.print("Is server live? ");
  Serial.println(server.available());
 
}
 //handleWebSocketMessage
void handle_message(WebsocketsMessage msg) {
   mensagem = msg.data();
   Serial.println(mensagem);

   // vertical.write(servov);
   // horizontal.write(servov);

  if (mensagem == "1"){
      frente();
      }  
  if (mensagem == "2"){
      tras();
      }  
  if (mensagem == "3"){
      gdir();
      }  
  if (mensagem == "4"){
      gesq();  
      }  
  if (mensagem == "0"){
      parado();
      }  
  if (mensagem == "20"){
      //horizontal cima
      }  
  if (mensagem == "10"){
      //horizontal baixo
      }  
  if (mensagem == "30"){
      // vertical cima 
      }  
  if (mensagem == "40"){
      // vertical baixo
      }  
}
 
void loop()
{
  btnState = digitalRead(btnGPIO);
  
  auto client = server.accept();
  client.onMessage(handle_message);
  while (client.available()) {
    client.poll();
        fb = esp_camera_fb_get();
        client.sendBinary((const char *)fb->buf, fb->len);
        esp_camera_fb_return(fb);
        fb = NULL;
  }
}

void parado(){
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
}

void frente(){
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
}

void tras(){
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
}

void gesq(){
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
}

void gdir(){
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
}
