#include <ArduinoWebsockets.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include "esp_camera.h"


const uint8_t index_html_gz[] = { 0x1f,0x8b,0x08,0x08,0xdf,0xc5,0x68,0x65,0x00,0xff,0x69,0x6e,0x64,0x65,0x78,0x2e,0x68,0x74,0x6d,0x6c,0x2e,0x67,0x7a,0x00,0xcd,0x58,0xef,0x6e,0xdb,0x36,0x10,0xff,0xbe,0xa7,0xe0,0x54,0x0c,0x75,0x8a,0xc8,0x92,0x5c,0xa7,0x49,0x54,0xdb,0xc0,0x9a,0x66,0x5b,0x80,0x62,0x29,0x92,0x14,0xc5,0x3e,0x0d,0x94,0x74,0x92,0xd8,0x4a,0xa4,0x4b,0x52,0x76,0x9d,0x2e,0x4f,0xb7,0x27,0x19,0xf6,0x22,0x3d,0x4a,0x4e,0xac,0x3f,0xb6,0xd2,0xd5,0x5f,0x26,0xc0,0xb0,0x44,0xde,0xfd,0x7e,0xbf,0x3b,0x1e,0x79,0x96,0x27,0x3f,0xbe,0xbe,0x3c,0xbb,0xf9,0xe3,0xed,0x39,0x49,0x75,0x9e,0xcd,0x7e,0x20,0x78,0x4d,0xcc,0x2d,0xc9,0x28,0x4f,0xa6,0xd6,0x5c,0xdb,0x81,0xb4,0xee,0xc7,0x81,0x46,0xd5,0x6d,0xf9,0x98,0x83,0xa6,0x24,0x4c,0xa9,0x54,0xa0,0xa7,0xd6,0xbb,0x9b,0x5f,0xec,0x13,0x8b,0x38,0x6d,0x03,0x4e,0x73,0x98,0x5a,0x0b,0x06,0xcb,0xb9,0x90,0xda,0x22,0xa1,0xe0,0x1a,0x38,0x3a,0x2c,0x59,0xa4,0xd3,0x69,0x04,0x0b,0x16,0x82,0x5d,0x3e,0x1c,0x12,0xc6,0x99,0x66,0x34,0xb3,0x55,0x48,0x33,0x98,0x7a,0x43,0xb7,0x09,0xa8,0x99,0xce,0x60,0x76,0x46,0xa5,0x64,0x3c,0x15,0xe4,0x2f,0x72,0x71,0x79,0x33,0x71,0xaa,0xd1,0x4a,0xa2,0xb3,0xd1,0x38,0x09,0x44,0xb4,0xaa,0x39,0xa7,0xde,0xec,0xec,0xe7,0xab,0xab,0x8b,0xdf,0x7f,0xbb,0x24,0xe7,0xd7,0x6f,0x2f,0xfe,0xbe,0x44,0x6b,0xaf,0x66,0x10,0xb3,0xa4,0x90,0x40,0x94,0x5e,0x21,0xb7,0x95,0x02,0x4b,0x52,0xed,0x8f,0x4f,0x17,0xe9,0x3a,0xfe,0xd2,0x28,0x62,0x0b,0xc2,0xa2,0xa9,0xa5,0xb4,0x04,0x9a,0xdb,0x26,0x1a,0xca,0x38,0x48,0x0c,0x2c,0xa3,0x4a,0x4d,0x2d,0x96,0xd3,0x04,0x6a,0xe3,0x33,0x32,0x61,0x79,0x52,0xf3,0xb1,0x88,0x92,0xe1,0xd4,0x32,0x13,0x0e,0xa2,0xd5,0xb0,0x9d,0x4a,0xc1,0x16,0x36,0x03,0x27,0x45,0x06,0xaa,0x2e,0x25,0x28,0xb4,0x16,0xbc,0x9c,0x8f,0x25,0xa6,0x14,0xac,0xd9,0x24,0x98,0x99,0x6b,0xe2,0x04,0xe6,0x53,0xce,0x6f,0x41,0x8b,0x75,0x0d,0xa6,0x0d,0x95,0x80,0xfa,0x54,0x02,0x4d,0xcc,0xb5,0x15,0xa8,0xe3,0x12,0x31,0x8c,0xb3,0x9f,0xbb,0x15,0x6a,0xcd,0x5b,0x4b,0x8a,0x61,0xf5,0x12,0xb6,0xbd,0xcb,0x25,0x6a,0xea,0x79,0x62,0x74,0x1f,0xe2,0x17,0x6a,0xf9,0x42,0x1a,0x53,0xe6,0x8a,0x31,0x81,0xb6,0x62,0xb7,0xe0,0x13,0xcf,0x75,0x7f,0x7a,0xd9,0x30,0xb8,0x6b,0x22,0x55,0xc9,0x44,0x2c,0xa3,0xec,0x4b,0x07,0x0a,0x47,0xb9,0x8a,0x85,0xcc,0x7d,0x22,0x85,0xa6,0x1a,0x06,0xf6,0xa9,0x1b,0x41,0x72,0xd0,0x04,0xfd,0x06,0xd6,0xc6,0x63,0xea,0x75,0xa9,0x42,0x91,0x09,0xe9,0x93,0x65,0xca,0x34,0xec,0x92,0x6c,0xaa,0x9c,0x34,0x5d,0x23,0xa6,0xe6,0x19,0x5d,0xf9,0x24,0xce,0xe0,0x73,0xd3,0xcf,0x8c,0xd8,0x98,0x22,0x08,0x35,0x13,0xdc,0x37,0x0c,0x45,0xce,0x9b,0x36,0x1f,0x0a,0xa5,0x59,0xbc,0x2a,0x6b,0x18,0x33,0x81,0x46,0x26,0x1f,0xb2,0x69,0x44,0x33,0x96,0x70,0x1b,0x75,0xe5,0xaa,0x6b,0xb0,0x51,0xf7,0xe4,0xa1,0x72,0xff,0xc7,0x1a,0xab,0x7d,0xd9,0x12,0x58,0x9e,0x48,0x3e,0x19,0xbb,0xee,0xbc,0xa5,0x6f,0x7d,0x32,0x90,0x51,0x77,0x2a,0xa0,0xe1,0xc7,0x44,0x8a,0x82,0x47,0xa8,0xac,0x5c,0xbb,0x20,0xc3,0xa1,0xad,0xac,0xa6,0x60,0x9b,0x94,0x39,0x95,0x09,0xe3,0xb6,0xac,0xe0,0x5f,0x34,0xd0,0x6b,0x0b,0x5e,0x6d,0x9d,0xa6,0x6b,0x97,0x58,0x26,0xc1,0x60,0x74,0x74,0x74,0x48,0x46,0x47,0xa3,0x43,0x72,0x34,0x6a,0x95,0x67,0x20,0x64,0x04,0xd2,0x96,0x34,0x62,0x05,0x66,0x07,0xcb,0xb3,0x1d,0xcb,0x3a,0x01,0xc7,0x3b,0xe3,0xef,0xce,0x14,0x0a,0x21,0x15,0x64,0xb8,0x72,0x3e,0xe1,0x82,0xb7,0x8a,0xd6,0xce,0xc5,0xad,0xfd,0x98,0xcd,0x12,0x82,0x8f,0x4c,0x3f,0x6a,0x96,0xab,0x3e,0x93,0xe6,0x8e,0x6e,0x05,0xde,0xd9,0x2f,0x55,0xde,0x7d,0xe2,0x36,0x39,0xe6,0x34,0x8a,0x18,0x4f,0x3a,0xe3,0xf7,0xf1,0x63,0xce,0x16,0xe9,0x4b,0xe2,0x3c,0x23,0xaf,0x21,0xc6,0xb3,0x9e,0x50,0xac,0x38,0x5d,0x48,0x4a,0x22,0x4a,0xe6,0xff,0x20,0x24,0xb6,0x47,0x91,0x8b,0x72,0xef,0x9b,0xb1,0xfb,0x59,0x41,0xee,0xdb,0x21,0x79,0xe6,0xec,0x58,0x46,0x9f,0x64,0x08,0x49,0xa5,0x9d,0x98,0x25,0xc2,0xda,0x1d,0x68,0x81,0xda,0x71,0xe9,0x73,0x3c,0x99,0x5c,0xf7,0x38,0x88,0x63,0xbc,0x89,0xe3,0xe8,0xd8,0x75,0x0f,0x4a,0x15,0xbf,0xae,0x2d,0x81,0x44,0xa8,0xe5,0xb6,0xc8,0x30,0x02,0xa4,0xa3,0x18,0x1e,0x64,0xa2,0x4d,0xb5,0x49,0xd1,0xc4,0xa9,0xce,0xd3,0x5a,0xa2,0x6a,0x47,0x6d,0x28,0xd9,0x5c,0x6f,0xce,0x5a,0xdc,0x70,0x4a,0x97,0xfa,0xc9,0x14,0x23,0x09,0x8b,0x1c,0x19,0x87,0x09,0xe8,0xf3,0x0c,0xcc,0xed,0xab,0xd5,0x45,0x34,0x78,0x5a,0xed,0xa8,0xa7,0xb5,0x9a,0xab,0xfc,0xde,0x5f,0xff,0xf9,0xee,0xea,0x0d,0x7a,0x5a,0x4b,0xe5,0x3b,0x8e,0x77,0x3a,0x1a,0x7a,0x2f,0x4e,0x86,0xe3,0xa1,0xe7,0x9f,0x78,0x56,0xdb,0x7a,0xa9,0xd0,0x92,0x23,0xd3,0x7b,0x08,0xae,0x45,0xf8,0x11,0xf4,0xa0,0x02,0x40,0xdc,0x07,0xd3,0xa5,0x1a,0x0a,0x9e,0x83,0x52,0xd8,0x76,0xd1,0x7c,0xb0,0xbe,0x3d,0x20,0xd3,0x59,0x6b,0x99,0x59,0xfc,0x30,0x3b,0x8c,0x28,0xfe,0x34,0x61,0x48,0x42,0x79,0x08,0x22,0x26,0xaf,0x32,0x11,0x1c,0xb4,0xec,0x17,0x54,0x92,0x42,0x66,0x97,0xc1,0x07,0xac,0x30,0x84,0x46,0xe2,0x61,0x88,0x71,0x69,0xa8,0x86,0xf0,0xb9,0x81,0xd7,0xda,0x61,0x26,0x47,0x43,0x6c,0xf5,0xe8,0xf9,0x80,0xb2,0xeb,0x10,0xbf,0xab,0x05,0x54,0xc5,0x5e,0x35,0xa1,0x7a,0x8e,0x3f,0x15,0x20,0x57,0xd7,0x65,0xb9,0x0b,0x39,0xb0,0xd6,0x6d,0xca,0xea,0xe4,0xd8,0x74,0xad,0x3e,0xbf,0xb2,0xdf,0x76,0xbc,0x4c,0xdf,0xec,0xf3,0x2a,0x7b,0x7c,0xd7,0x0b,0xcf,0xb0,0x5e,0x2f,0xf3,0x63,0xa2,0xbe,0x5a,0x95,0x5b,0x9a,0x7f,0x4f,0x60,0x69,0xce,0xff,0x7b,0x5c,0x8b,0x5e,0xaa,0xed,0x51,0x2d,0xfa,0x89,0x3a,0x41,0x61,0x09,0xe2,0x51,0x71,0xbe,0x40,0xe3,0x37,0x4c,0x61,0x3f,0x02,0x34,0x13,0x73,0xe0,0xd6,0x21,0x19,0x80,0x19,0xde,0x52,0x8d,0x86,0x0a,0xfb,0xe2,0x30,0x13,0xc9,0xc0,0x3a,0xc3,0xd3,0xeb,0xf3,0xbf,0x62,0x53,0xe8,0x84,0x06,0x20,0x35,0xad,0x6b,0xbb,0xab,0x53,0x56,0x39,0xda,0x42,0xab,0x45,0x11,0xa6,0x58,0xd6,0xf8,0x53,0x1b,0xc9,0xb7,0xf0,0xa2,0x58,0x05,0x3c,0x1a,0x58,0xde,0x4e,0x70,0x93,0xc9,0xbd,0xa0,0x47,0x3b,0xa1,0x4d,0xc2,0xf7,0x82,0x7e,0xbe,0x1b,0x1a,0x97,0x65,0x2f,0xe8,0xf1,0x4e,0x68,0xc7,0x29,0x51,0xd0,0x4a,0x7d,0xeb,0x12,0xa0,0xed,0x63,0x7c,0xee,0x77,0x65,0x69,0x3f,0xe0,0x9e,0x1c,0xed,0x05,0xdc,0x57,0x32,0x7b,0x01,0xa7,0xf9,0x1e,0xb0,0xa3,0x0e,0xee,0x06,0x96,0xef,0x81,0xeb,0xed,0xc4,0x5d,0xec,0x23,0xf7,0x79,0x0f,0xec,0x3e,0x72,0xc7,0xdd,0xf4,0x6e,0x12,0x8c,0xdd,0xbf,0xd6,0xe2,0xf1,0xdd,0xeb,0xe1,0xad,0x19,0x5f,0x8f,0xcd,0x7f,0x02,0x5f,0x01,0xe8,0xe2,0x77,0x50,0x23,0x10,0x00,0x00 };
  
String mensagem;


// Motor A
const int motor1Pin1 = 2;
const int motor1Pin2 = 14;
const int enable1Pin = 12;

// Motor B
const int motor2Pin1 = 15;
const int motor2Pin2 = 13;
const int enable2Pin = 0;

const int freq = 30000;
const int pwmChannel = 0;
//const uint8_t resolution = 8;
int velocidade = 255;

// motores


#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22
 
camera_fb_t * fb = NULL;
 
using namespace websockets;
WebsocketsServer server;

int btnGPIO = 0;
int btnState = false;

const char *ssid = "Carrinho";
const char *password = "Carrinho";

AsyncWebServer webserver(80);
 
void setup()
{

  ESP32PWM::allocateTimer(0);
  ESP32PWM::allocateTimer(1);
  ESP32PWM::allocateTimer(2);
  ESP32PWM::allocateTimer(3);
  horizontal.setPeriodHertz(50);    // standard 50 hz servo
  horizontal.attach(19, 1000, 2000);  
  vertical.setPeriodHertz(50);    // standard 50 hz servo
  vertical.attach(21, 1000, 2000); 
  horizontal.write(90);
  vertical.write(90);

  Serial.begin(115200);
  pinMode(btnGPIO, INPUT);

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  
  Serial.begin(115200);
  Serial.print("EndereÃ§o IP do AP: ");
  Serial.println(IP);

  
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(enable1Pin, OUTPUT);

  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(enable2Pin, OUTPUT);
  
  // configure LED PWM functionalitites
  ledcSetup(pwmChannel, freq, 8);

  // attach the channel to the GPIO to be controlled
  ledcAttachPin(enable1Pin, pwmChannel);  
  ledcAttachPin(enable2Pin, pwmChannel);

  ledcWrite(pwmChannel, velocidade);

 
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  
  if (psramFound()) {
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }
   
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
 
  sensor_t * s = esp_camera_sensor_get();
  s->set_framesize(s, FRAMESIZE_SVGA);
 


 
  webserver.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", index_html_gz, sizeof(index_html_gz));
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });
 
  webserver.begin();
  server.listen(81);
  

  
  Serial.print("Is server live? ");
  Serial.println(server.available());
 
}
 //handleWebSocketMessage
void handle_message(WebsocketsMessage msg) {
   mensagem = msg.data();
   Serial.println(mensagem);

   // vertical.write(servov);
   // horizontal.write(servov);

  if (mensagem == "1"){
      frente();
      }  
  if (mensagem == "2"){
      tras();
      }  
  if (mensagem == "3"){
      gdir();
      }  
  if (mensagem == "4"){
      gesq();  
      }  
  if (mensagem == "0"){
      parado();
      }  
  if (mensagem == "20"){
      //horizontal cima
      }  
  if (mensagem == "10"){
      //horizontal baixo
      }  
  if (mensagem == "30"){
      // vertical cima 
      }  
  if (mensagem == "40"){
      // vertical baixo
      }  
}
 
void loop()
{
  btnState = digitalRead(btnGPIO);
  
  auto client = server.accept();
  client.onMessage(handle_message);
  while (client.available()) {
    client.poll();
        fb = esp_camera_fb_get();
        client.sendBinary((const char *)fb->buf, fb->len);
        esp_camera_fb_return(fb);
        fb = NULL;
  }
}

void parado(){
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
}

void frente(){
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
}

void tras(){
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
}

void gesq(){
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
}

void gdir(){
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
}
